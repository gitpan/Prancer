.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prancer::Const 3"
.TH Prancer::Const 3 "2014-03-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prancer::Const
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Prancer::Const;
\&
\&    sub handle {
\&        my $self = shift;
\&
\&        mount(\*(AqGET\*(Aq, \*(Aq/\*(Aq, sub {
\&
\&            ...
\&
\&            context\->finalize(Prancer::Const::OK);
\&        });
\&
\&        dispatch;
\&    }
.Ve
.SH "COMMONLY USED ATTRIBUTES"
.IX Header "COMMONLY USED ATTRIBUTES"
.IP "Prancer::Const::OK" 4
.IX Item "Prancer::Const::OK"
Alias for \f(CW\*(C`Prancer::Const::HTTP_OK\*(C'\fR.
.IP "Prancer::Const::REDIRECT" 4
.IX Item "Prancer::Const::REDIRECT"
Alias for \f(CW\*(C`Prancer::Const::HTTP_MOVED_TEMPORARILY\*(C'\fR.
.IP "Prancer::Const::AUTH_REQUIRED" 4
.IX Item "Prancer::Const::AUTH_REQUIRED"
Alias for \f(CW\*(C`Prancer::Const::HTTP_UNAUTHORIZED\*(C'\fR.
.IP "Prancer::Const::FORBIDDEN" 4
.IX Item "Prancer::Const::FORBIDDEN"
Alias for \f(CW\*(C`Prancer::Const::HTTP_FORBIDDEN\*(C'\fR.
.IP "Prancer::Const::NOT_FOUND" 4
.IX Item "Prancer::Const::NOT_FOUND"
Alias for \f(CW\*(C`Prancer::Const::HTTP_NOT_FOUND\*(C'\fR.
.IP "Prancer::Const::SERVER_ERROR" 4
.IX Item "Prancer::Const::SERVER_ERROR"
Alias for \f(CW\*(C`Prancer::Const::HTTP_INTERNAL_SERVER_ERROR\*(C'\fR.
.SH "1xx INFORMATIONAL"
.IX Header "1xx INFORMATIONAL"
.IP "Prancer::Const::HTTP_CONTINUE (100)" 4
.IX Item "Prancer::Const::HTTP_CONTINUE (100)"
This means that the server has received the request headers, and that the
client should proceed to send the request body (in the case of a request for
which a body needs to be sent; for example, a \s-1POST\s0 request). If the request
body is large, sending it to a server when a request has already been rejected
based upon inappropriate headers is inefficient. To have a server check if the
request could be accepted based on the request's headers alone, a client must
send \f(CW\*(C`Expect: 100\-continue\*(C'\fR as a header in its initial request and check if a
\&\f(CW\*(C`100 Continue\*(C'\fR status code is received in response before continuing (or
receive \f(CW\*(C`417 Expectation Failed\*(C'\fR and not continue).
.IP "Prancer::Const::HTTP_SWITCHING_PROTOCOLS (101)" 4
.IX Item "Prancer::Const::HTTP_SWITCHING_PROTOCOLS (101)"
This means the requester has asked the server to switch protocols and the
server is acknowledging that it will do so.
.SH "2xx SUCCESS"
.IX Header "2xx SUCCESS"
.IP "Prancer::Const::HTTP_OK (200)" 4
.IX Item "Prancer::Const::HTTP_OK (200)"
Standard response for successful \s-1HTTP\s0 requests. The actual response will depend
on the request method used. In a \s-1GET\s0 request, the response will contain an
entity corresponding to the requested resource. In a \s-1POST\s0 request the response
will contain an entity describing or containing the result of the action.
.IP "Prancer::Const::HTTP_CREATED (201)" 4
.IX Item "Prancer::Const::HTTP_CREATED (201)"
The request has been fulfilled and resulted in a new resource being created.
.IP "Prancer::Const::HTTP_ACCEPTED (202)" 4
.IX Item "Prancer::Const::HTTP_ACCEPTED (202)"
The request has been accepted for processing, but the processing has not been
completed. The request might or might not eventually be acted upon, as it might
be disallowed when processing actually takes place.
.IP "Prancer::Const::HTTP_NON_AUTHORITATIVE (203)" 4
.IX Item "Prancer::Const::HTTP_NON_AUTHORITATIVE (203)"
The server successfully processed the request, but is returning information
that may be from another source.
.IP "Prancer::Const::HTTP_NO_CONTENT (204)" 4
.IX Item "Prancer::Const::HTTP_NO_CONTENT (204)"
The server successfully processed the request, but is not returning any
content. Usually used as a response to a successful delete request.
.IP "Prancer::Const::HTTP_RESET_CONTENT (205)" 4
.IX Item "Prancer::Const::HTTP_RESET_CONTENT (205)"
The server successfully processed the request, but is not returning any
content. Unlike a 204 response, this response requires that the requester reset
the document view.
.IP "Prancer::Const::HTTP_PARTIAL_CONTENT (206)" 4
.IX Item "Prancer::Const::HTTP_PARTIAL_CONTENT (206)"
The server is delivering only part of the resource due to a range header sent
by the client. The range header is used by tools like wget to enable resuming
of interrupted downloads, or split a download into multiple simultaneous
streams.
.SH "3xx REDIRECTION"
.IX Header "3xx REDIRECTION"
.IP "Prancer::Const::HTTP_MULTIPLE_CHOICES (300)" 4
.IX Item "Prancer::Const::HTTP_MULTIPLE_CHOICES (300)"
Indicates multiple options for the resource that the client may follow. It, for
instance, could be used to present different format options for video, list
files with different extensions, or word sense disambiguation.
.IP "Prancer::Const::HTTP_MOVED_PERMANENTLY (301)" 4
.IX Item "Prancer::Const::HTTP_MOVED_PERMANENTLY (301)"
This and all future requests should be directed to the given \s-1URI.\s0
.IP "Prancer::Const::HTTP_MOVED_TEMPORARILY (302)" 4
.IX Item "Prancer::Const::HTTP_MOVED_TEMPORARILY (302)"
This is an example of industry practice contradicting the standard. The
\&\s-1HTTP/1.0\s0 specification (\s-1RFC 1945\s0) required the client to perform a temporary
redirect (the original describing phrase was \*(L"Moved Temporarily\*(R"), but popular
browsers implemented 302 with the functionality of a 303 See Other. Therefore,
\&\s-1HTTP/1.1\s0 added status codes 303 and 307 to distinguish between the two
behaviors. However, some Web applications and frameworks use the 302 status
code as if it were the 303.
.IP "Prancer::Const::HTTP_FOUND (302)" 4
.IX Item "Prancer::Const::HTTP_FOUND (302)"
This is the same as \f(CW\*(C`Prancer::Const::HTTP_MOVED_TEMPORARILIY\*(C'\fR.
.IP "Prancer::Const::HTTP_SEE_OTHER (303)" 4
.IX Item "Prancer::Const::HTTP_SEE_OTHER (303)"
The response to the request can be found under another \s-1URI\s0 using a \s-1GET\s0 method.
When received in response to a \s-1POST \s0(or \s-1PUT/DELETE\s0), it should be assumed that
the server has received the data and the redirect should be issued with a
separate \s-1GET\s0 message
.IP "Prancer::Const::HTTP_NOT_MODIFIED (304)" 4
.IX Item "Prancer::Const::HTTP_NOT_MODIFIED (304)"
Indicates that the resource has not been modified since the version specified
by the request headers If-Modified-Since or If-Match. This means that there is
no need to retransmit the resource, since the client still has a previously
downloaded copy.
.IP "Prancer::Const::HTTP_USE_PROXY (305)" 4
.IX Item "Prancer::Const::HTTP_USE_PROXY (305)"
The requested resource is only available through a proxy, whose address is
provided in the response. Many \s-1HTTP\s0 clients (such as Mozilla and Internet
Explorer) do not correctly handle responses with this status code, primarily
for security reasons.
.IP "Prancer::Const::HTTP_TEMPORARY_REDIRECT (307)" 4
.IX Item "Prancer::Const::HTTP_TEMPORARY_REDIRECT (307)"
In this case, the request should be repeated with another \s-1URI\s0; however, future
requests should still use the original \s-1URI.\s0 In contrast to how 302 was
historically implemented, the request method is not allowed to be changed when
reissuing the original request. For instance, a \s-1POST\s0 request should be repeated
using another \s-1POST\s0 request.
.IP "Prancer::Const::HTTP_PERMAMENT_REDIRECT (308)" 4
.IX Item "Prancer::Const::HTTP_PERMAMENT_REDIRECT (308)"
The request, and all future requests should be repeated using another \s-1URI. 307\s0
and 308 (as proposed) parallel the behaviors of 302 and 301, but do not allow
the \s-1HTTP\s0 method to change. So, for example, submitting a form to a permanently
redirected resource may continue smoothly.
.SH "4xx CLIENT ERROR"
.IX Header "4xx CLIENT ERROR"
.IP "Prancer::Const::HTTP_BAD_REQUEST (400)" 4
.IX Item "Prancer::Const::HTTP_BAD_REQUEST (400)"
The request cannot be fulfilled due to bad syntax.
.IP "Prancer::Const::HTTP_UNAUTHORIZED (401)" 4
.IX Item "Prancer::Const::HTTP_UNAUTHORIZED (401)"
Similar to \f(CW\*(C`403 Forbidden\*(C'\fR, but specifically for use when authentication is
required and has failed or has not yet been provided. The response must include
a \f(CW\*(C`WWW\-Authenticate\*(C'\fR header field containing a challenge applicable to the
requested resource. See Basic access authentication and Digest access
authentication.
.IP "Prancer::Const::HTTP_PAYMENT_REQUIRED (402)" 4
.IX Item "Prancer::Const::HTTP_PAYMENT_REQUIRED (402)"
Reserved for future use. The original intention was that this code might be
used as part of some form of digital cash or micropayment scheme, but that has
not happened, and this code is not usually used. YouTube uses this status if a
particular \s-1IP\s0 address has made excessive requests, and requires the person to
enter a \s-1CAPTCHA.\s0
.IP "Prancer::Const::HTTP_FORBIDDEN (403)" 4
.IX Item "Prancer::Const::HTTP_FORBIDDEN (403)"
The request was a valid request, but the server is refusing to respond to it.
Unlike a \f(CW\*(C`401 Unauthorized\*(C'\fR response, authenticating will make no difference.
On servers where authentication is required, this commonly means that the
provided credentials were successfully authenticated but that the credentials
still do not grant the client permission to access the resource (e.g., a
recognized user attempting to access restricted content).
.IP "Prancer::Const::HTTP_NOT_FOUND (404)" 4
.IX Item "Prancer::Const::HTTP_NOT_FOUND (404)"
The requested resource could not be found but may be available again in the
future. Subsequent requests by the client are permissible.
.IP "Prancer::Const::HTTP_METHOD_NOT_ALLOWED (405)" 4
.IX Item "Prancer::Const::HTTP_METHOD_NOT_ALLOWED (405)"
A request was made of a resource using a request method not supported by that
resource; for example, using \s-1GET\s0 on a form which requires data to be presented
via \s-1POST,\s0 or using \s-1PUT\s0 on a read-only resource.
.IP "Prancer::Const::HTTP_NOT_ACCEPTABLE (406)" 4
.IX Item "Prancer::Const::HTTP_NOT_ACCEPTABLE (406)"
The requested resource is only capable of generating content not acceptable
according to the \f(CW\*(C`Accept\*(C'\fR headers sent in the request.
.IP "Prancer::Const::HTTP_PROXY_AUTHENTICATION_REQUIRED (407)" 4
.IX Item "Prancer::Const::HTTP_PROXY_AUTHENTICATION_REQUIRED (407)"
The client must first authenticate itself with the proxy.
.IP "Prancer::Const::HTTP_REQUEST_TIME_OUT (408)" 4
.IX Item "Prancer::Const::HTTP_REQUEST_TIME_OUT (408)"
The server timed out waiting for the request. According to W3 \s-1HTTP\s0
specifications: \*(L"The client did not produce a request within the time that the
server was prepared to wait. The client \s-1MAY\s0 repeat the request without
modifications at any later time.\*(R"
.IP "Prancer::Const::HTTP_CONFLICT (409)" 4
.IX Item "Prancer::Const::HTTP_CONFLICT (409)"
Indicates that the request could not be processed because of conflict in the
request, such as an edit conflict in the case of multiple updates.
.IP "Prancer::Const::HTTP_GONE (410)" 4
.IX Item "Prancer::Const::HTTP_GONE (410)"
Indicates that the resource requested is no longer available and will not be
available again. This should be used when a resource has been intentionally
removed and the resource should be purged. Upon receiving a 410 status code,
the client should not request the resource again in the future. Clients such as
search engines should remove the resource from their indices. Most use cases do
not require clients and search engines to purge the resource, and a \*(L"404 Not
Found\*(R" may be used instead.
.IP "Prancer::Const::HTTP_LENGTH_REQUIRED (411)" 4
.IX Item "Prancer::Const::HTTP_LENGTH_REQUIRED (411)"
The request did not specify the length of its content, which is required by the
requested resource.
.IP "Prancer::Const::HTTP_PRECONDITION_FAILED (412)" 4
.IX Item "Prancer::Const::HTTP_PRECONDITION_FAILED (412)"
The server does not meet one of the preconditions that the requester put on the
request.
.IP "Prancer::Const::HTTP_REQUEST_ENTITY_TOO_LARGE (413)" 4
.IX Item "Prancer::Const::HTTP_REQUEST_ENTITY_TOO_LARGE (413)"
The request is larger than the server is willing or able to process.
.IP "Prancer::Const::HTTP_REQUEST_URI_TOO_LARGE (414)" 4
.IX Item "Prancer::Const::HTTP_REQUEST_URI_TOO_LARGE (414)"
The \s-1URI\s0 provided was too long for the server to process. Often the result of
too much data being encoded as a query-string of a \s-1GET\s0 request, in which case
it should be converted to a \s-1POST\s0 request.
.IP "Prancer::Const::HTTP_UNSUPPORTED_MEDIA_TYPE (415)" 4
.IX Item "Prancer::Const::HTTP_UNSUPPORTED_MEDIA_TYPE (415)"
The request entity has a media type which the server or resource does not
support. For example, the client uploads an image as \f(CW\*(C`image/svg+xml\*(C'\fR, but the
server requires that images use a different format.
.IP "Prancer::Const::HTTP_RANGE_NOT_SATISFIABLE (416)" 4
.IX Item "Prancer::Const::HTTP_RANGE_NOT_SATISFIABLE (416)"
The client has asked for a portion of the file, but the server cannot supply
that portion. For example, if the client asked for a part of the file that lies
beyond the end of the file.
.IP "Prancer::Const::HTTP_EXPECTATION_FAILED (417)" 4
.IX Item "Prancer::Const::HTTP_EXPECTATION_FAILED (417)"
The server cannot meet the requirements of the Expect request-header field.
.IP "Prancer::Const::HTTP_UPGRADE_REQUIRED (426)" 4
.IX Item "Prancer::Const::HTTP_UPGRADE_REQUIRED (426)"
The client should switch to a different protocol such as \s-1TLS/1.0.\s0
.IP "Prancer::Const::HTTP_PRECONDITION_REQUIRED (428)" 4
.IX Item "Prancer::Const::HTTP_PRECONDITION_REQUIRED (428)"
The origin server requires the request to be conditional. Intended to prevent
\&\*(L"the 'lost update' problem, where a client GETs a resource's state, modifies
it, and PUTs it back to the server, when meanwhile a third party has modified
the state on the server, leading to a conflict.\*(R"
.IP "Prancer::Const::HTTP_TOO_MANY_REQUESTS (429)" 4
.IX Item "Prancer::Const::HTTP_TOO_MANY_REQUESTS (429)"
The user has sent too many requests in a given amount of time. Intended for use
with rate limiting schemes.
.IP "Prancer::Const::HTTP_REQUEST_HEADER_TOO_LARGE (431)" 4
.IX Item "Prancer::Const::HTTP_REQUEST_HEADER_TOO_LARGE (431)"
The server is unwilling to process the request because either an individual
header field, or all the header fields collectively, are too large.
.SH "5xx SERVER ERROR"
.IX Header "5xx SERVER ERROR"
.IP "Prancer::Const::HTTP_INTERNAL_SERVER_ERROR (500)" 4
.IX Item "Prancer::Const::HTTP_INTERNAL_SERVER_ERROR (500)"
A generic error message, given when no more specific message is suitable.
.IP "Prancer::Const::HTTP_NOT_IMPLEMENTED (501)" 4
.IX Item "Prancer::Const::HTTP_NOT_IMPLEMENTED (501)"
The server either does not recognize the request method, or it lacks the
ability to fulfill the request. Usually this implies future availability (e.g.,
a new feature of a web-service \s-1API\s0).
.IP "Prancer::Const::HTTP_BAD_GATEWAY (502)" 4
.IX Item "Prancer::Const::HTTP_BAD_GATEWAY (502)"
The server was acting as a gateway or proxy and received an invalid response
from the upstream server.
.IP "Prancer::Const::HTTP_SERVICE_UNAVAILABLE (503)" 4
.IX Item "Prancer::Const::HTTP_SERVICE_UNAVAILABLE (503)"
The server is currently unavailable (because it is overloaded or down for
maintenance). Generally, this is a temporary state. Sometimes, this can be
permanent as well on test servers.
.IP "Prancer::Const::HTTP_GATEWAY_TIME_OUT (504)" 4
.IX Item "Prancer::Const::HTTP_GATEWAY_TIME_OUT (504)"
The server was acting as a gateway or proxy and did not receive a timely
response from the upstream server.
.IP "Prancer::Const::HTTP_VERSION_NOT_SUPPORTED (505)" 4
.IX Item "Prancer::Const::HTTP_VERSION_NOT_SUPPORTED (505)"
The server does not support the \s-1HTTP\s0 protocol version used in the request.
.SH "CREDITS"
.IX Header "CREDITS"
This documentation was copied almost entirely from Wikipedia's documentation
on \s-1HTTP\s0 codes <http://en.wikipedia.org/wiki/Http_codes> and is freely available
under Creative Commons Attribution-ShareAlike License <http://creativecommons.org/licenses/by-sa/3.0/>.
