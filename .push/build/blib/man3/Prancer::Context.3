.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prancer::Context 3"
.TH Prancer::Context 3 "2014-03-27" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prancer::Context
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The context gives you access to all pieces of a request from request parameters
to cookies, sessions and headers. It can be used by calling \f(CW\*(C`context\*(C'\fR from
anywhere in a package that extends Prancer::Application. Otherwise you must
pass it to other packages to make it available.
.PP
.Vb 2
\&    use Prancer::Application qw(:all);
\&    use parent qw(Prancer::Application);
\&
\&    sub handle {
\&        my ($self, $env) = @_;
\&
\&        mount(\*(AqGET\*(Aq, \*(Aq/\*(Aq, sub {
\&            context\->header(set => \*(AqContent\-Type\*(Aq, value => \*(Aqtext/plain\*(Aq);
\&            context\->body("hello world");
\&            context\->finalize(200);
\&        });
\&
\&        return dispatch;
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "env" 4
.IX Item "env"
Returns the \s-1PSGI\s0 environment for the request.
.IP "template" 4
.IX Item "template"
This is a magical wrapper to \f(CW\*(C`Prancer::template()\*(C'\fR in that it works by calling
\&\f(CW\*(C`Prancer::template\*(C'\fR but it will merge \f(CW\*(C`params\*(C'\fR, \f(CW\*(C`config\*(C'\fR, and \f(CW\*(C`session\*(C'\fR
into the list of template variables using their respective names as the first
key. This allows you to write this in your template:
.Sp
.Vb 3
\&    <% params.bar %>
\&    <% config.foo.bar %>
\&    <% session.asdf.fdsa %>
.Ve
.IP "session" 4
.IX Item "session"
This gives access to the session in various ways. For example:
.Sp
.Vb 4
\&    my $does_foo_exist = context\->session\->has(\*(Aqfoo\*(Aq);
\&    my $foo = context\->session\->get(\*(Aqfoo\*(Aq);
\&    context\->session\->set(\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq);
\&    context\->session\->remove(\*(Aqfoo\*(Aq);
.Ve
.Sp
Changes made to the session are persisted immediately to whatever medium
backs your sessions.
.IP "request" 4
.IX Item "request"
Returns the Prancer::Request object for the request.
.IP "response" 4
.IX Item "response"
Returns the Prancer::Response object that will be used to generate the
response.
.IP "header" 4
.IX Item "header"
This gives access request and response headers. For example:
.Sp
.Vb 2
\&    # get a request header
\&    my $useragent = context\->header(get => \*(Aquser\-agent\*(Aq);
\&
\&    # set a response header
\&    context\->header(set => \*(AqContent\-Type\*(Aq, value => \*(Aqtext/plain\*(Aq);
.Ve
.IP "cookie" 4
.IX Item "cookie"
This gives access to request and response cookies. For example:
.Sp
.Vb 2
\&    # get a request cookie
\&    my $foo = context\->cookie(get => \*(Aqfoo\*(Aq);
\&
\&    # set a response cookie
\&    context\->cookie(set => \*(Aqfoo\*(Aq, value => {
\&        \*(Aqvalue\*(Aq => \*(Aqbar\*(Aq,
\&        \*(Aqdomain\*(Aq => \*(Aq.example.com\*(Aq,
\&    });
.Ve
.IP "param" 4
.IX Item "param"
This is a wrapper around the \f(CW\*(C`param\*(C'\fR method to Prancer::Request.
.IP "params" 4
.IX Item "params"
This is a wrapper around the \f(CW\*(C`params\*(C'\fR method to Prancer::Request.
.IP "upload" 4
.IX Item "upload"
This is a wrapper around the \f(CW\*(C`upload\*(C'\fR method to Prancer::Request.
.IP "uploads" 4
.IX Item "uploads"
This is a wrapper around the \f(CW\*(C`uploads\*(C'\fR method to Prancer::Request.
.IP "body" 4
.IX Item "body"
This is a wrapper around the \f(CW\*(C`body\*(C'\fR method to Prancer::Response.
.IP "finalize" 4
.IX Item "finalize"
This is a wrapper around the \f(CW\*(C`finalize\*(C'\fR method to Prancer::Response.
