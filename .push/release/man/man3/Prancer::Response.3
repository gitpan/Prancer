.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prancer::Response 3"
.TH Prancer::Response 3 "2014-03-25" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prancer::Response
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    sub handle {
\&
\&        ...
\&
\&        my $response = context\->response();
\&        status(Prancer::Const::OK);
\&        response\->header("Content\-Type" => "text/plain");
\&        response\->body("hello, goodbye");
\&        finalize;
\&    }
\&
\&    # or using a callback
\&    sub handle {
\&
\&        ...
\&
\&        status(Prancer::Const::OK);
\&        $response\->header("Content\-Type" => "text/plain");
\&        $response\->callback(sub {
\&            my $writer = shift;
\&            $writer\->write("What\*(Aqs up?");
\&            $writer\->close();
\&        });
\&        finalize;
\&    }
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "header" 4
.IX Item "header"
If called with no arguments this will return the names of all headers that have
been set to be sent with the response. Otherwise, this method expects a list of
headers to add to the response. For example:
.Sp
.Vb 2
\&    $response\->header("Content\-Type" => "text/plain");
\&    $response\->header("Content\-Length" => 1234, "X\-Foo" => "bar");
.Ve
.Sp
If the header has already been set this will add another value to it and the
response will include the same header multiple times. To replace a header that
has already been set, remove the existing value first:
.Sp
.Vb 1
\&    $response\->headers\->remove("X\-Foo");
.Ve
.IP "headers" 4
.IX Item "headers"
Returns a Hash::MultiValue of all headers that have been set to be sent with
the response.
.IP "cookie" 4
.IX Item "cookie"
If called with no arguments this will return the names of all cookes that have
been set to be sent with the response. Otherwise, this method expects a list of
cookies to add to the response. For example:
.Sp
.Vb 6
\&    $response\->cookie(\*(Aqfoo\*(Aq => {
\&        \*(Aqvalue\*(Aq   => \*(Aqtest\*(Aq,
\&        \*(Aqpath\*(Aq    => "/",
\&        \*(Aqdomain\*(Aq  => \*(Aq.example.com\*(Aq,
\&        \*(Aqexpires\*(Aq => time + 24 * 60 * 60,
\&    });
.Ve
.Sp
The hashref may contain things such as \f(CW\*(C`value\*(C'\fR, \f(CW\*(C`domain\*(C'\fR, \f(CW\*(C`expires\*(C'\fR,
\&\f(CW\*(C`path\*(C'\fR, \f(CW\*(C`httponly\*(C'\fR, and \f(CW\*(C`secure\*(C'\fR. \f(CW\*(C`expires\*(C'\fR can take a string or an integer
(as an epoch time) and \fBdoes not\fR convert string formats like \f(CW\*(C`+3M\*(C'\fR.
.IP "cookies" 4
.IX Item "cookies"
Returns a Hash::MultiValue of all cookies that have been set to be sent with
the response.
.IP "body" 4
.IX Item "body"
Send buffered output to the client. Anything sent to the client with this
method will be buffered until \f(CW\*(C`finalize\*(C'\fR is called. For example:
.Sp
.Vb 2
\&    $response\->body("hello");
\&    $response\->body("goodbye", "world");
.Ve
.Sp
The body may also be a callback to send a streaming response to the client.
Any headers or response codes set in the callback will be ignored as they must
all be set beforehand. Any body set before or after a callback is set will also
be ignored. For example:
.Sp
.Vb 5
\&    $response\->body(sub {
\&        my $writer = shift;
\&        $writer\->write("Hello, world!");
\&        $writer\->close();
\&    });
.Ve
.IP "finalize" 4
.IX Item "finalize"
This requires one argument: the \s-1HTTP\s0 status code of the response. It will then
send a \s-1PSGI\s0 compatible result. For example:
.Sp
.Vb 2
\&    # send a 200 response
\&    $response\->finalize(Prancer::Const::OK);
\&
\&    # or hard code it
\&    $response\->finalize(405);
.Ve
